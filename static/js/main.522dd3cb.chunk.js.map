{"version":3,"sources":["logo.svg","useLocalStorage.ts","FinnHub.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","FinnHub","token","setToken","tokenField","setTokenField","onSubmit","e","stopPropagation","preventDefault","type","onChange","target","FinnHubOperator","socket","setSocket","tickers","setTickers","latest","setLatest","useEffect","WebSocket","addEventListener","event","message","data","i","s","others","newLatest","p","length","close","registryRef","useRef","Set","forEach","t","current","has","send","symbol","add","Array","from","values","includes","delete","tickerField","setTickerField","placeholder","map","onClick","filter","ti","App","className","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.522dd3cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useState } from \"react\";\n\n// Hook\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (s: T) => void] {\n// State to store our value\n// Pass initial state function to useState so logic is only executed once\nconst [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n    // Get from local storage by key\n    const item = window.localStorage.getItem(key);\n    // Parse stored json or if none return initialValue\n    return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n    // If error also return initialValue\n    console.log(error);\n    return initialValue;\n    }\n});\n\n// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nconst setValue = (value: T) => {\n    try {\n    // Allow value to be a function so we have same API as useState\n    const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n    // Save state\n    setStoredValue(valueToStore);\n    // Save to local storage\n    window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n    // A more advanced implementation would handle the error case\n    console.log(error);\n    }\n};\n\nreturn [storedValue, setValue];\n}","import React, { useState, useRef } from 'react';\nimport { useEffect } from \"react\"\nimport { useLocalStorage } from './useLocalStorage';\n\n\nexport const FinnHub = () => {\n    const [token, setToken] = useLocalStorage<string>('finnhub-token', '');\n    const [tokenField, setTokenField] = useState('');\n\n    return <>\n    { token ? <FinnHubOperator token={token}/> : <form onSubmit={e => {\n        e.stopPropagation();\n        e.preventDefault();\n        setToken(tokenField);\n    }}>\n        <code>Please enter token</code>\n        <input type=\"text\" onChange={e => setTokenField(e.target.value)} value={tokenField} />\n    </form>}\n    </>\n}\n\nexport const FinnHubOperator = ({ token }: { token: string }) => {\n    const [socket, setSocket] = useState();\n\n    const [tickers, setTickers] = useLocalStorage<string[]>('tickers-list', []);\n\n    const [latest, setLatest] = useState<{ [ticker: string]: { v: number, p: number }}>({});\n\n    // Manage connection to finnhub\n    useEffect(() => {\n        const socket = new WebSocket(`wss://ws.finnhub.io?token=${token}`);\n\n        socket.addEventListener('open', () => {\n            setSocket(socket);\n        });\n\n        // Update latest\n        socket.addEventListener('message', function (event) {\n            const message = JSON.parse(event.data);\n            debugger\n            if (message.type === \"trade\") {\n                debugger\n                for (let i = 0; i < message.data.length; i++) {\n                    debugger\n                    const { s, ...others } = message.data[i];\n                    setLatest(newLatest => ({ ...newLatest, [s]: others?.p }));\n                }\n            }\n        });\n\n        return () => socket.close();\n    }, [token]);\n\n    // Manage tickers subscription list\n    const registryRef = useRef(new Set<string>());\n    useEffect(() => {\n        if(!socket) { return; }\n        tickers.forEach(t => {\n            if (!registryRef.current.has(t)) {\n                socket.send(JSON.stringify({type: 'subscribe', symbol: t}));\n                registryRef.current.add(t);\n            }\n        });\n        Array.from(registryRef.current.values()).forEach(t => {\n            if (!tickers.includes(t)) {\n                socket.send(JSON.stringify({type: 'unsubscribe', symbol: t}));\n                registryRef.current.delete(t);\n            }\n        })\n    }, [tickers, socket]);\n\n    // Logic for adding more tickers\n    const [tickerField, setTickerField] = useState('');\n\n    return (<>\n        <form onSubmit={e => {\n            e.stopPropagation();\n            e.preventDefault();\n            if (tickerField && !tickers.includes(tickerField)) {\n                setTickers([...tickers, tickerField])    \n            }\n            setTickerField('');\n        }}>\n            <input type=\"text\" onChange={e => setTickerField(e.target.value)} value={tickerField} placeholder=\"Enter ticker symbol\" />\n        </form>\n        <ul>\n            {tickers.map(t => <li key={t}>{t} {t in latest ? latest[t] : '...'} <a onClick={() => {\n            setTickers(tickers.filter(ti => ti !== t))\n            }}>X</a></li>)}\n        </ul>\n    </>)\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { FinnHub } from './FinnHub';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <FinnHub />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}